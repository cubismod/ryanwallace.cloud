name: Preview Site

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  preview:
    # Skip this job if the PR is from renovate bot
    if: github.actor != 'cubis-renovate[bot]'

    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write
      id-token: write
      issues: write
      pull-requests: write

    concurrency:
      group: "pages-preview"
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          submodules: true

      # - name: Restore cache
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ryanwallace.cloud/
      #     key: ryanwallace-cloud-preview-${{ github.event.number }}
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          version: 10.16.1

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: "24"
          cache: "pnpm"
          cache-dependency-path: "ryanwallace.cloud/map/pnpm-lock.yaml"

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@75d2e84710de30f6ff7268e08f310b60ef14033f # v3
        with:
          hugo-version: "0.148.2"
          extended: true

      - name: Install dependencies
        working-directory: ryanwallace.cloud/map
        run: pnpm install --frozen-lockfile=false

      - name: Build map assets
        working-directory: ryanwallace.cloud/map
        run: pnpm clean && pnpm build && pnpm move && pnpm title
        env:
          MT_KEY: ${{ secrets.MT_KEY }}
          NODE_ENV: development

      - name: Build Hugo site
        working-directory: ryanwallace.cloud
        run: |
          hugo --cleanDestinationDir --minify --gc --baseURL https://gh.ryanwallace.cloud
        env:
          HUGO_ENVIRONMENT: preview
          HUGO_ENV: preview
          MT_KEY: ${{ secrets.MT_KEY }}

      # - name: Save cache
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ryanwallace.cloud/
      #     key: ryanwallace-cloud-preview-${{ github.event.number }}

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b # v4
        with:
          path: ryanwallace.cloud/public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4

      - name: Comment PR with preview URL
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |
            // Get PR number from the event payload
            const prNumber = ${{ github.event.number }};

            if (!prNumber) {
              console.log('No PR number found in event context, skipping preview comment');
              return;
            }

            const previewUrl = `https://gh.ryanwallace.cloud`;

            const comment = `
            Your changes have been deployed to a preview environment.

            **Preview URL:** [${previewUrl}](${previewUrl})

            This preview will be automatically updated when you push new commits to this PR.

            ---
            *This preview was generated by GitHub Actions*`;

            try {
              // Check if we already commented on this PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });

              const existingComment = comments.find(comment =>
                comment.user.login === 'github-actions[bot]' &&
                comment.body.includes('Preview URL:')
              );

              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: comment
                });
                console.log(`Updated existing preview comment for PR #${prNumber}`);
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: comment
                });
                console.log(`Created new preview comment for PR #${prNumber}`);
              }
            } catch (error) {
              console.log(`Failed to comment on PR #${prNumber}:`, error.message);
            }
